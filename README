VM for Go

A virtual machine designed to be embedded into Go applications

Features
* A hot-swappable instruction set.
* STDIN, STDOUT, STDERR readable and writable to any io.Reader or io.Writer
* Adjustable memory size
* Enable scripting into your Go app.

How to use:
* import "github.com/mcvoid/vm"
* vm, err := vm.New(1024)
* prog := vm.Program{vm.Push, 3, vm.Push, 5, vm.Add, vm.Print, 1, vm.Halt}
* vm.Run(prog, 0, false)
* Watch it print "8" to vm.Stdout (os.Stdout by default)

What it can't do:
* compile a higher-level language to machine code (maybe in a separate package)
* Stack bounds checking (Go has bounds checking, though, so it will just panic on overflow)
* Printing ASCII/UTF-8 (yet)
* Reading from Stdin (yet)
* Self-modifying code (code and stack reside in different areas)
* Multi-word return values (maybe in the future)
* Not even remotely thread-safe. Use different VM's to execute code concurrently.

What it can do:
* Function calls.
* Fibonacci numbers!
* Tail recursion.
* Add your own instructions to make it do more.
* Hook vm.Stdout to an http.ResponseWriter to script your web apps!

Instruction Set

The instruction set is still incomplete, but as things get added, new capabilities will emerge.

0 Halt Stops execution. Probably the most important instruction.
1 Load <addr> pushes contents of memory address addr to the stack.
2 Store <addr> saves top of the stack to addr.
3 LoadArg <n> Gets the nth function argument and pushes it to the stack.
4 StoreArg <n> Saves the top of the stack to the nth argument.
5 Add Pops two values off the stack and pushes the sum of them.
6 Subtract Pops two values off the stack and pushes the difference of the two.
7 Push <n> Pushes a literal value n to the stack.
8 Pop Removes the top value from the stack.
9 JumpIfZero <addr> Jumps to address addr if the top of the stack is zero
10 JumpIfNotZero <addr> I think you can figure this one out.
11 Call <addr> <n> Calls a function at addr with n arguments.
12 Return Returns from the function, popping the arguments and pushing the return value.
13 Print <n> Pops n numbers from the stack and prints them in a line.

That's all there is for now. More to come later.

